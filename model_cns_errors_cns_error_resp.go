/*
CNS-BACKEND

The responses of the open api in swagger focus on the data field rather than the code and the message fields

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cnsbackend

import (
	"encoding/json"
)

// CnsErrorsCnsErrorResp struct for CnsErrorsCnsErrorResp
type CnsErrorsCnsErrorResp struct {
	Code *string `json:"code,omitempty"`
	Detail *string `json:"detail,omitempty"`
	Message *string `json:"message,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CnsErrorsCnsErrorResp CnsErrorsCnsErrorResp

// NewCnsErrorsCnsErrorResp instantiates a new CnsErrorsCnsErrorResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCnsErrorsCnsErrorResp() *CnsErrorsCnsErrorResp {
	this := CnsErrorsCnsErrorResp{}
	return &this
}

// NewCnsErrorsCnsErrorRespWithDefaults instantiates a new CnsErrorsCnsErrorResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCnsErrorsCnsErrorRespWithDefaults() *CnsErrorsCnsErrorResp {
	this := CnsErrorsCnsErrorResp{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *CnsErrorsCnsErrorResp) GetCode() string {
	if o == nil || isNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CnsErrorsCnsErrorResp) GetCodeOk() (*string, bool) {
	if o == nil || isNil(o.Code) {
    return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *CnsErrorsCnsErrorResp) HasCode() bool {
	if o != nil && !isNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *CnsErrorsCnsErrorResp) SetCode(v string) {
	o.Code = &v
}

// GetDetail returns the Detail field value if set, zero value otherwise.
func (o *CnsErrorsCnsErrorResp) GetDetail() string {
	if o == nil || isNil(o.Detail) {
		var ret string
		return ret
	}
	return *o.Detail
}

// GetDetailOk returns a tuple with the Detail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CnsErrorsCnsErrorResp) GetDetailOk() (*string, bool) {
	if o == nil || isNil(o.Detail) {
    return nil, false
	}
	return o.Detail, true
}

// HasDetail returns a boolean if a field has been set.
func (o *CnsErrorsCnsErrorResp) HasDetail() bool {
	if o != nil && !isNil(o.Detail) {
		return true
	}

	return false
}

// SetDetail gets a reference to the given string and assigns it to the Detail field.
func (o *CnsErrorsCnsErrorResp) SetDetail(v string) {
	o.Detail = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *CnsErrorsCnsErrorResp) GetMessage() string {
	if o == nil || isNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CnsErrorsCnsErrorResp) GetMessageOk() (*string, bool) {
	if o == nil || isNil(o.Message) {
    return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *CnsErrorsCnsErrorResp) HasMessage() bool {
	if o != nil && !isNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *CnsErrorsCnsErrorResp) SetMessage(v string) {
	o.Message = &v
}

func (o CnsErrorsCnsErrorResp) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !isNil(o.Detail) {
		toSerialize["detail"] = o.Detail
	}
	if !isNil(o.Message) {
		toSerialize["message"] = o.Message
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CnsErrorsCnsErrorResp) UnmarshalJSON(bytes []byte) (err error) {
	varCnsErrorsCnsErrorResp := _CnsErrorsCnsErrorResp{}

	if err = json.Unmarshal(bytes, &varCnsErrorsCnsErrorResp); err == nil {
		*o = CnsErrorsCnsErrorResp(varCnsErrorsCnsErrorResp)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "code")
		delete(additionalProperties, "detail")
		delete(additionalProperties, "message")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCnsErrorsCnsErrorResp struct {
	value *CnsErrorsCnsErrorResp
	isSet bool
}

func (v NullableCnsErrorsCnsErrorResp) Get() *CnsErrorsCnsErrorResp {
	return v.value
}

func (v *NullableCnsErrorsCnsErrorResp) Set(val *CnsErrorsCnsErrorResp) {
	v.value = val
	v.isSet = true
}

func (v NullableCnsErrorsCnsErrorResp) IsSet() bool {
	return v.isSet
}

func (v *NullableCnsErrorsCnsErrorResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCnsErrorsCnsErrorResp(val *CnsErrorsCnsErrorResp) *NullableCnsErrorsCnsErrorResp {
	return &NullableCnsErrorsCnsErrorResp{value: val, isSet: true}
}

func (v NullableCnsErrorsCnsErrorResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCnsErrorsCnsErrorResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


