/*
CNS-BACKEND

The responses of the open api in swagger focus on the data field rather than the code and the message fields

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cnsbackend

import (
	"encoding/json"
)

// ServicesCensorTextResp struct for ServicesCensorTextResp
type ServicesCensorTextResp struct {
	// LogID          int64  `json:\"log_id\"`
	Conclusion string `json:"conclusion"`
	// 审核结果类型，可取值1.合规，2.不合规，3.疑似，4.审核失败
	ConclusionType int32 `json:"conclusionType"`
	// 不合规/疑似/命中白名单项详细信息。响应成功并且conclusion为疑似或不合规或命中白名单时才返回，响应失败或conclusion为合规且未命中白名单时不返回
	Data []ServicesData `json:"data,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServicesCensorTextResp ServicesCensorTextResp

// NewServicesCensorTextResp instantiates a new ServicesCensorTextResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServicesCensorTextResp(conclusion string, conclusionType int32) *ServicesCensorTextResp {
	this := ServicesCensorTextResp{}
	this.Conclusion = conclusion
	this.ConclusionType = conclusionType
	return &this
}

// NewServicesCensorTextRespWithDefaults instantiates a new ServicesCensorTextResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServicesCensorTextRespWithDefaults() *ServicesCensorTextResp {
	this := ServicesCensorTextResp{}
	return &this
}

// GetConclusion returns the Conclusion field value
func (o *ServicesCensorTextResp) GetConclusion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Conclusion
}

// GetConclusionOk returns a tuple with the Conclusion field value
// and a boolean to check if the value has been set.
func (o *ServicesCensorTextResp) GetConclusionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Conclusion, true
}

// SetConclusion sets field value
func (o *ServicesCensorTextResp) SetConclusion(v string) {
	o.Conclusion = v
}

// GetConclusionType returns the ConclusionType field value
func (o *ServicesCensorTextResp) GetConclusionType() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ConclusionType
}

// GetConclusionTypeOk returns a tuple with the ConclusionType field value
// and a boolean to check if the value has been set.
func (o *ServicesCensorTextResp) GetConclusionTypeOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ConclusionType, true
}

// SetConclusionType sets field value
func (o *ServicesCensorTextResp) SetConclusionType(v int32) {
	o.ConclusionType = v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ServicesCensorTextResp) GetData() []ServicesData {
	if o == nil || isNil(o.Data) {
		var ret []ServicesData
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesCensorTextResp) GetDataOk() ([]ServicesData, bool) {
	if o == nil || isNil(o.Data) {
    return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ServicesCensorTextResp) HasData() bool {
	if o != nil && !isNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []ServicesData and assigns it to the Data field.
func (o *ServicesCensorTextResp) SetData(v []ServicesData) {
	o.Data = v
}

func (o ServicesCensorTextResp) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["conclusion"] = o.Conclusion
	}
	if true {
		toSerialize["conclusionType"] = o.ConclusionType
	}
	if !isNil(o.Data) {
		toSerialize["data"] = o.Data
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ServicesCensorTextResp) UnmarshalJSON(bytes []byte) (err error) {
	varServicesCensorTextResp := _ServicesCensorTextResp{}

	if err = json.Unmarshal(bytes, &varServicesCensorTextResp); err == nil {
		*o = ServicesCensorTextResp(varServicesCensorTextResp)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "conclusion")
		delete(additionalProperties, "conclusionType")
		delete(additionalProperties, "data")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServicesCensorTextResp struct {
	value *ServicesCensorTextResp
	isSet bool
}

func (v NullableServicesCensorTextResp) Get() *ServicesCensorTextResp {
	return v.value
}

func (v *NullableServicesCensorTextResp) Set(val *ServicesCensorTextResp) {
	v.value = val
	v.isSet = true
}

func (v NullableServicesCensorTextResp) IsSet() bool {
	return v.isSet
}

func (v *NullableServicesCensorTextResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServicesCensorTextResp(val *ServicesCensorTextResp) *NullableServicesCensorTextResp {
	return &NullableServicesCensorTextResp{value: val, isSet: true}
}

func (v NullableServicesCensorTextResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServicesCensorTextResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


