/*
CNS-BACKEND

The responses of the open api in swagger focus on the data field rather than the code and the message fields

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cnsbackend

import (
	"encoding/json"
)

// ServicesHits struct for ServicesHits
type ServicesHits struct {
	// 违规项目所属数据集名称
	DatasetName *string `json:"datasetName,omitempty"`
	Probability *float32 `json:"probability,omitempty"`
	// 违规文本关键字
	Words []string `json:"words,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServicesHits ServicesHits

// NewServicesHits instantiates a new ServicesHits object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServicesHits() *ServicesHits {
	this := ServicesHits{}
	return &this
}

// NewServicesHitsWithDefaults instantiates a new ServicesHits object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServicesHitsWithDefaults() *ServicesHits {
	this := ServicesHits{}
	return &this
}

// GetDatasetName returns the DatasetName field value if set, zero value otherwise.
func (o *ServicesHits) GetDatasetName() string {
	if o == nil || isNil(o.DatasetName) {
		var ret string
		return ret
	}
	return *o.DatasetName
}

// GetDatasetNameOk returns a tuple with the DatasetName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesHits) GetDatasetNameOk() (*string, bool) {
	if o == nil || isNil(o.DatasetName) {
    return nil, false
	}
	return o.DatasetName, true
}

// HasDatasetName returns a boolean if a field has been set.
func (o *ServicesHits) HasDatasetName() bool {
	if o != nil && !isNil(o.DatasetName) {
		return true
	}

	return false
}

// SetDatasetName gets a reference to the given string and assigns it to the DatasetName field.
func (o *ServicesHits) SetDatasetName(v string) {
	o.DatasetName = &v
}

// GetProbability returns the Probability field value if set, zero value otherwise.
func (o *ServicesHits) GetProbability() float32 {
	if o == nil || isNil(o.Probability) {
		var ret float32
		return ret
	}
	return *o.Probability
}

// GetProbabilityOk returns a tuple with the Probability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesHits) GetProbabilityOk() (*float32, bool) {
	if o == nil || isNil(o.Probability) {
    return nil, false
	}
	return o.Probability, true
}

// HasProbability returns a boolean if a field has been set.
func (o *ServicesHits) HasProbability() bool {
	if o != nil && !isNil(o.Probability) {
		return true
	}

	return false
}

// SetProbability gets a reference to the given float32 and assigns it to the Probability field.
func (o *ServicesHits) SetProbability(v float32) {
	o.Probability = &v
}

// GetWords returns the Words field value if set, zero value otherwise.
func (o *ServicesHits) GetWords() []string {
	if o == nil || isNil(o.Words) {
		var ret []string
		return ret
	}
	return o.Words
}

// GetWordsOk returns a tuple with the Words field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesHits) GetWordsOk() ([]string, bool) {
	if o == nil || isNil(o.Words) {
    return nil, false
	}
	return o.Words, true
}

// HasWords returns a boolean if a field has been set.
func (o *ServicesHits) HasWords() bool {
	if o != nil && !isNil(o.Words) {
		return true
	}

	return false
}

// SetWords gets a reference to the given []string and assigns it to the Words field.
func (o *ServicesHits) SetWords(v []string) {
	o.Words = v
}

func (o ServicesHits) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.DatasetName) {
		toSerialize["datasetName"] = o.DatasetName
	}
	if !isNil(o.Probability) {
		toSerialize["probability"] = o.Probability
	}
	if !isNil(o.Words) {
		toSerialize["words"] = o.Words
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ServicesHits) UnmarshalJSON(bytes []byte) (err error) {
	varServicesHits := _ServicesHits{}

	if err = json.Unmarshal(bytes, &varServicesHits); err == nil {
		*o = ServicesHits(varServicesHits)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "datasetName")
		delete(additionalProperties, "probability")
		delete(additionalProperties, "words")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServicesHits struct {
	value *ServicesHits
	isSet bool
}

func (v NullableServicesHits) Get() *ServicesHits {
	return v.value
}

func (v *NullableServicesHits) Set(val *ServicesHits) {
	v.value = val
	v.isSet = true
}

func (v NullableServicesHits) IsSet() bool {
	return v.isSet
}

func (v *NullableServicesHits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServicesHits(val *ServicesHits) *NullableServicesHits {
	return &NullableServicesHits{value: val, isSet: true}
}

func (v NullableServicesHits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServicesHits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


