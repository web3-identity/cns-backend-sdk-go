/*
CNS-BACKEND

The responses of the open api in swagger focus on the data field rather than the code and the message fields

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cnsbackend

import (
	"encoding/json"
)

// ModelsCommitCore struct for ModelsCommitCore
type ModelsCommitCore struct {
	CommitHash string `json:"commit_hash"`
	// hex 数组
	Data []string `json:"data"`
	Duration int32 `json:"duration"`
	Fuses *int32 `json:"fuses,omitempty"`
	Name string `json:"name"`
	OrderState *int32 `json:"order_state,omitempty"`
	// base32地址或hex地址
	Owner string `json:"owner"`
	Resolver string `json:"resolver"`
	ReverseRecord bool `json:"reverse_record"`
	// 32字节
	Secret string `json:"secret"`
	WrapperExpiry *int32 `json:"wrapper_expiry,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ModelsCommitCore ModelsCommitCore

// NewModelsCommitCore instantiates a new ModelsCommitCore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsCommitCore(commitHash string, data []string, duration int32, name string, owner string, resolver string, reverseRecord bool, secret string) *ModelsCommitCore {
	this := ModelsCommitCore{}
	this.CommitHash = commitHash
	this.Data = data
	this.Duration = duration
	this.Name = name
	this.Owner = owner
	this.Resolver = resolver
	this.ReverseRecord = reverseRecord
	this.Secret = secret
	return &this
}

// NewModelsCommitCoreWithDefaults instantiates a new ModelsCommitCore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsCommitCoreWithDefaults() *ModelsCommitCore {
	this := ModelsCommitCore{}
	return &this
}

// GetCommitHash returns the CommitHash field value
func (o *ModelsCommitCore) GetCommitHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommitHash
}

// GetCommitHashOk returns a tuple with the CommitHash field value
// and a boolean to check if the value has been set.
func (o *ModelsCommitCore) GetCommitHashOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.CommitHash, true
}

// SetCommitHash sets field value
func (o *ModelsCommitCore) SetCommitHash(v string) {
	o.CommitHash = v
}

// GetData returns the Data field value
func (o *ModelsCommitCore) GetData() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ModelsCommitCore) GetDataOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *ModelsCommitCore) SetData(v []string) {
	o.Data = v
}

// GetDuration returns the Duration field value
func (o *ModelsCommitCore) GetDuration() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Duration
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
func (o *ModelsCommitCore) GetDurationOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Duration, true
}

// SetDuration sets field value
func (o *ModelsCommitCore) SetDuration(v int32) {
	o.Duration = v
}

// GetFuses returns the Fuses field value if set, zero value otherwise.
func (o *ModelsCommitCore) GetFuses() int32 {
	if o == nil || isNil(o.Fuses) {
		var ret int32
		return ret
	}
	return *o.Fuses
}

// GetFusesOk returns a tuple with the Fuses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCommitCore) GetFusesOk() (*int32, bool) {
	if o == nil || isNil(o.Fuses) {
    return nil, false
	}
	return o.Fuses, true
}

// HasFuses returns a boolean if a field has been set.
func (o *ModelsCommitCore) HasFuses() bool {
	if o != nil && !isNil(o.Fuses) {
		return true
	}

	return false
}

// SetFuses gets a reference to the given int32 and assigns it to the Fuses field.
func (o *ModelsCommitCore) SetFuses(v int32) {
	o.Fuses = &v
}

// GetName returns the Name field value
func (o *ModelsCommitCore) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ModelsCommitCore) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ModelsCommitCore) SetName(v string) {
	o.Name = v
}

// GetOrderState returns the OrderState field value if set, zero value otherwise.
func (o *ModelsCommitCore) GetOrderState() int32 {
	if o == nil || isNil(o.OrderState) {
		var ret int32
		return ret
	}
	return *o.OrderState
}

// GetOrderStateOk returns a tuple with the OrderState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCommitCore) GetOrderStateOk() (*int32, bool) {
	if o == nil || isNil(o.OrderState) {
    return nil, false
	}
	return o.OrderState, true
}

// HasOrderState returns a boolean if a field has been set.
func (o *ModelsCommitCore) HasOrderState() bool {
	if o != nil && !isNil(o.OrderState) {
		return true
	}

	return false
}

// SetOrderState gets a reference to the given int32 and assigns it to the OrderState field.
func (o *ModelsCommitCore) SetOrderState(v int32) {
	o.OrderState = &v
}

// GetOwner returns the Owner field value
func (o *ModelsCommitCore) GetOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value
// and a boolean to check if the value has been set.
func (o *ModelsCommitCore) GetOwnerOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Owner, true
}

// SetOwner sets field value
func (o *ModelsCommitCore) SetOwner(v string) {
	o.Owner = v
}

// GetResolver returns the Resolver field value
func (o *ModelsCommitCore) GetResolver() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Resolver
}

// GetResolverOk returns a tuple with the Resolver field value
// and a boolean to check if the value has been set.
func (o *ModelsCommitCore) GetResolverOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Resolver, true
}

// SetResolver sets field value
func (o *ModelsCommitCore) SetResolver(v string) {
	o.Resolver = v
}

// GetReverseRecord returns the ReverseRecord field value
func (o *ModelsCommitCore) GetReverseRecord() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ReverseRecord
}

// GetReverseRecordOk returns a tuple with the ReverseRecord field value
// and a boolean to check if the value has been set.
func (o *ModelsCommitCore) GetReverseRecordOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.ReverseRecord, true
}

// SetReverseRecord sets field value
func (o *ModelsCommitCore) SetReverseRecord(v bool) {
	o.ReverseRecord = v
}

// GetSecret returns the Secret field value
func (o *ModelsCommitCore) GetSecret() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Secret
}

// GetSecretOk returns a tuple with the Secret field value
// and a boolean to check if the value has been set.
func (o *ModelsCommitCore) GetSecretOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Secret, true
}

// SetSecret sets field value
func (o *ModelsCommitCore) SetSecret(v string) {
	o.Secret = v
}

// GetWrapperExpiry returns the WrapperExpiry field value if set, zero value otherwise.
func (o *ModelsCommitCore) GetWrapperExpiry() int32 {
	if o == nil || isNil(o.WrapperExpiry) {
		var ret int32
		return ret
	}
	return *o.WrapperExpiry
}

// GetWrapperExpiryOk returns a tuple with the WrapperExpiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsCommitCore) GetWrapperExpiryOk() (*int32, bool) {
	if o == nil || isNil(o.WrapperExpiry) {
    return nil, false
	}
	return o.WrapperExpiry, true
}

// HasWrapperExpiry returns a boolean if a field has been set.
func (o *ModelsCommitCore) HasWrapperExpiry() bool {
	if o != nil && !isNil(o.WrapperExpiry) {
		return true
	}

	return false
}

// SetWrapperExpiry gets a reference to the given int32 and assigns it to the WrapperExpiry field.
func (o *ModelsCommitCore) SetWrapperExpiry(v int32) {
	o.WrapperExpiry = &v
}

func (o ModelsCommitCore) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["commit_hash"] = o.CommitHash
	}
	if true {
		toSerialize["data"] = o.Data
	}
	if true {
		toSerialize["duration"] = o.Duration
	}
	if !isNil(o.Fuses) {
		toSerialize["fuses"] = o.Fuses
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.OrderState) {
		toSerialize["order_state"] = o.OrderState
	}
	if true {
		toSerialize["owner"] = o.Owner
	}
	if true {
		toSerialize["resolver"] = o.Resolver
	}
	if true {
		toSerialize["reverse_record"] = o.ReverseRecord
	}
	if true {
		toSerialize["secret"] = o.Secret
	}
	if !isNil(o.WrapperExpiry) {
		toSerialize["wrapper_expiry"] = o.WrapperExpiry
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ModelsCommitCore) UnmarshalJSON(bytes []byte) (err error) {
	varModelsCommitCore := _ModelsCommitCore{}

	if err = json.Unmarshal(bytes, &varModelsCommitCore); err == nil {
		*o = ModelsCommitCore(varModelsCommitCore)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "commit_hash")
		delete(additionalProperties, "data")
		delete(additionalProperties, "duration")
		delete(additionalProperties, "fuses")
		delete(additionalProperties, "name")
		delete(additionalProperties, "order_state")
		delete(additionalProperties, "owner")
		delete(additionalProperties, "resolver")
		delete(additionalProperties, "reverse_record")
		delete(additionalProperties, "secret")
		delete(additionalProperties, "wrapper_expiry")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModelsCommitCore struct {
	value *ModelsCommitCore
	isSet bool
}

func (v NullableModelsCommitCore) Get() *ModelsCommitCore {
	return v.value
}

func (v *NullableModelsCommitCore) Set(val *ModelsCommitCore) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsCommitCore) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsCommitCore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsCommitCore(val *ModelsCommitCore) *NullableModelsCommitCore {
	return &NullableModelsCommitCore{value: val, isSet: true}
}

func (v NullableModelsCommitCore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsCommitCore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


