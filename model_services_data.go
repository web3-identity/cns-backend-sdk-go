/*
CNS-BACKEND

The responses of the open api in swagger focus on the data field rather than the code and the message fields

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cnsbackend

import (
	"encoding/json"
)

// ServicesData struct for ServicesData
type ServicesData struct {
	// 审核结果，可取值：合规、不合规、疑似、审核失败
	Conclusion *string `json:"conclusion,omitempty"`
	// 审核结果类型，可取值1.合规，2.不合规，3.疑似，4.审核失败
	ConclusionType *int32 `json:"conclusionType,omitempty"`
	// 命中关键词信息
	Hits []ServicesHits `json:"hits,omitempty"`
	// 不合规项描述信息
	Msg *string `json:"msg,omitempty"`
	// 审核子类型，此字段需参照type主类型字段决定其含义： 当type=11时subType取值含义： 0:百度官方默认违禁词库 当type=12时subType取值含义： 0:低质灌水、1:暴恐违禁、2:文本色情、3:政治敏感、4:恶意推广、5:低俗辱骂 当type=13时subType取值含义： 0:自定义文本黑名单 当type=14时subType取值含义： 0:自定义文本白名单
	SubType *int32 `json:"subType,omitempty"`
	// 审核主类型，11：官方违禁词库、12：文本反作弊、13:自定义文本黑名单、14:自定义文本白名单
	Type *int32 `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServicesData ServicesData

// NewServicesData instantiates a new ServicesData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServicesData() *ServicesData {
	this := ServicesData{}
	return &this
}

// NewServicesDataWithDefaults instantiates a new ServicesData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServicesDataWithDefaults() *ServicesData {
	this := ServicesData{}
	return &this
}

// GetConclusion returns the Conclusion field value if set, zero value otherwise.
func (o *ServicesData) GetConclusion() string {
	if o == nil || isNil(o.Conclusion) {
		var ret string
		return ret
	}
	return *o.Conclusion
}

// GetConclusionOk returns a tuple with the Conclusion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesData) GetConclusionOk() (*string, bool) {
	if o == nil || isNil(o.Conclusion) {
    return nil, false
	}
	return o.Conclusion, true
}

// HasConclusion returns a boolean if a field has been set.
func (o *ServicesData) HasConclusion() bool {
	if o != nil && !isNil(o.Conclusion) {
		return true
	}

	return false
}

// SetConclusion gets a reference to the given string and assigns it to the Conclusion field.
func (o *ServicesData) SetConclusion(v string) {
	o.Conclusion = &v
}

// GetConclusionType returns the ConclusionType field value if set, zero value otherwise.
func (o *ServicesData) GetConclusionType() int32 {
	if o == nil || isNil(o.ConclusionType) {
		var ret int32
		return ret
	}
	return *o.ConclusionType
}

// GetConclusionTypeOk returns a tuple with the ConclusionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesData) GetConclusionTypeOk() (*int32, bool) {
	if o == nil || isNil(o.ConclusionType) {
    return nil, false
	}
	return o.ConclusionType, true
}

// HasConclusionType returns a boolean if a field has been set.
func (o *ServicesData) HasConclusionType() bool {
	if o != nil && !isNil(o.ConclusionType) {
		return true
	}

	return false
}

// SetConclusionType gets a reference to the given int32 and assigns it to the ConclusionType field.
func (o *ServicesData) SetConclusionType(v int32) {
	o.ConclusionType = &v
}

// GetHits returns the Hits field value if set, zero value otherwise.
func (o *ServicesData) GetHits() []ServicesHits {
	if o == nil || isNil(o.Hits) {
		var ret []ServicesHits
		return ret
	}
	return o.Hits
}

// GetHitsOk returns a tuple with the Hits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesData) GetHitsOk() ([]ServicesHits, bool) {
	if o == nil || isNil(o.Hits) {
    return nil, false
	}
	return o.Hits, true
}

// HasHits returns a boolean if a field has been set.
func (o *ServicesData) HasHits() bool {
	if o != nil && !isNil(o.Hits) {
		return true
	}

	return false
}

// SetHits gets a reference to the given []ServicesHits and assigns it to the Hits field.
func (o *ServicesData) SetHits(v []ServicesHits) {
	o.Hits = v
}

// GetMsg returns the Msg field value if set, zero value otherwise.
func (o *ServicesData) GetMsg() string {
	if o == nil || isNil(o.Msg) {
		var ret string
		return ret
	}
	return *o.Msg
}

// GetMsgOk returns a tuple with the Msg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesData) GetMsgOk() (*string, bool) {
	if o == nil || isNil(o.Msg) {
    return nil, false
	}
	return o.Msg, true
}

// HasMsg returns a boolean if a field has been set.
func (o *ServicesData) HasMsg() bool {
	if o != nil && !isNil(o.Msg) {
		return true
	}

	return false
}

// SetMsg gets a reference to the given string and assigns it to the Msg field.
func (o *ServicesData) SetMsg(v string) {
	o.Msg = &v
}

// GetSubType returns the SubType field value if set, zero value otherwise.
func (o *ServicesData) GetSubType() int32 {
	if o == nil || isNil(o.SubType) {
		var ret int32
		return ret
	}
	return *o.SubType
}

// GetSubTypeOk returns a tuple with the SubType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesData) GetSubTypeOk() (*int32, bool) {
	if o == nil || isNil(o.SubType) {
    return nil, false
	}
	return o.SubType, true
}

// HasSubType returns a boolean if a field has been set.
func (o *ServicesData) HasSubType() bool {
	if o != nil && !isNil(o.SubType) {
		return true
	}

	return false
}

// SetSubType gets a reference to the given int32 and assigns it to the SubType field.
func (o *ServicesData) SetSubType(v int32) {
	o.SubType = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ServicesData) GetType() int32 {
	if o == nil || isNil(o.Type) {
		var ret int32
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesData) GetTypeOk() (*int32, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ServicesData) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given int32 and assigns it to the Type field.
func (o *ServicesData) SetType(v int32) {
	o.Type = &v
}

func (o ServicesData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Conclusion) {
		toSerialize["conclusion"] = o.Conclusion
	}
	if !isNil(o.ConclusionType) {
		toSerialize["conclusionType"] = o.ConclusionType
	}
	if !isNil(o.Hits) {
		toSerialize["hits"] = o.Hits
	}
	if !isNil(o.Msg) {
		toSerialize["msg"] = o.Msg
	}
	if !isNil(o.SubType) {
		toSerialize["subType"] = o.SubType
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ServicesData) UnmarshalJSON(bytes []byte) (err error) {
	varServicesData := _ServicesData{}

	if err = json.Unmarshal(bytes, &varServicesData); err == nil {
		*o = ServicesData(varServicesData)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "conclusion")
		delete(additionalProperties, "conclusionType")
		delete(additionalProperties, "hits")
		delete(additionalProperties, "msg")
		delete(additionalProperties, "subType")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServicesData struct {
	value *ServicesData
	isSet bool
}

func (v NullableServicesData) Get() *ServicesData {
	return v.value
}

func (v *NullableServicesData) Set(val *ServicesData) {
	v.value = val
	v.isSet = true
}

func (v NullableServicesData) IsSet() bool {
	return v.isSet
}

func (v *NullableServicesData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServicesData(val *ServicesData) *NullableServicesData {
	return &NullableServicesData{value: val, isSet: true}
}

func (v NullableServicesData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServicesData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


