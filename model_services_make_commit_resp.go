/*
CNS-BACKEND

The responses of the open api in swagger focus on the data field rather than the code and the message fields

API version: 0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cnsbackend

import (
	"encoding/json"
)

// ServicesMakeCommitResp struct for ServicesMakeCommitResp
type ServicesMakeCommitResp struct {
	CommitHash *string `json:"commit_hash,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServicesMakeCommitResp ServicesMakeCommitResp

// NewServicesMakeCommitResp instantiates a new ServicesMakeCommitResp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServicesMakeCommitResp() *ServicesMakeCommitResp {
	this := ServicesMakeCommitResp{}
	return &this
}

// NewServicesMakeCommitRespWithDefaults instantiates a new ServicesMakeCommitResp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServicesMakeCommitRespWithDefaults() *ServicesMakeCommitResp {
	this := ServicesMakeCommitResp{}
	return &this
}

// GetCommitHash returns the CommitHash field value if set, zero value otherwise.
func (o *ServicesMakeCommitResp) GetCommitHash() string {
	if o == nil || isNil(o.CommitHash) {
		var ret string
		return ret
	}
	return *o.CommitHash
}

// GetCommitHashOk returns a tuple with the CommitHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesMakeCommitResp) GetCommitHashOk() (*string, bool) {
	if o == nil || isNil(o.CommitHash) {
    return nil, false
	}
	return o.CommitHash, true
}

// HasCommitHash returns a boolean if a field has been set.
func (o *ServicesMakeCommitResp) HasCommitHash() bool {
	if o != nil && !isNil(o.CommitHash) {
		return true
	}

	return false
}

// SetCommitHash gets a reference to the given string and assigns it to the CommitHash field.
func (o *ServicesMakeCommitResp) SetCommitHash(v string) {
	o.CommitHash = &v
}

func (o ServicesMakeCommitResp) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.CommitHash) {
		toSerialize["commit_hash"] = o.CommitHash
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ServicesMakeCommitResp) UnmarshalJSON(bytes []byte) (err error) {
	varServicesMakeCommitResp := _ServicesMakeCommitResp{}

	if err = json.Unmarshal(bytes, &varServicesMakeCommitResp); err == nil {
		*o = ServicesMakeCommitResp(varServicesMakeCommitResp)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "commit_hash")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServicesMakeCommitResp struct {
	value *ServicesMakeCommitResp
	isSet bool
}

func (v NullableServicesMakeCommitResp) Get() *ServicesMakeCommitResp {
	return v.value
}

func (v *NullableServicesMakeCommitResp) Set(val *ServicesMakeCommitResp) {
	v.value = val
	v.isSet = true
}

func (v NullableServicesMakeCommitResp) IsSet() bool {
	return v.isSet
}

func (v *NullableServicesMakeCommitResp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServicesMakeCommitResp(val *ServicesMakeCommitResp) *NullableServicesMakeCommitResp {
	return &NullableServicesMakeCommitResp{value: val, isSet: true}
}

func (v NullableServicesMakeCommitResp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServicesMakeCommitResp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


